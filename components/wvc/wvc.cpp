#include "wvc.h"
#include "esphome/core/log.h"
#include "esphome/components/uart/uart.h"

namespace esphome {
namespace wvc {

static const char *const TAG = "wvc";
static uint8_t expected_start_byte = 0x00;
static size_t expected_length = 0;
static unsigned long last_device_query_time = millis();
static unsigned long last_byte_time = millis();
static float VAC = 0; 
static float VDC = 0;
static float ADC = 0;
static float ACW = 0;
static int TEMP = 0;
static float AAC = 0;
static float DCW = 0;
static float EFF = 0;
static int indexADC = 0;
static int indexAAC = 0;

void WVCComponent::setup() {
	publish_state_once_(serial_number_text_sensor_, inverter_sn_);
	publish_state_once_(hardware_revision_text_sensor_, inverter_type_);
	publish_state_once_(model_text_sensor_, inverter_model_);
	if (this->inverter_type_ == "R3") {
		this->raw_data = new uint8_t[14];
		uint8_t temp[14] = {0xF5, 0xFD, 0x08, 0x08, 0xF9, 0xE9, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68};
		temp[9] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(0, 2).c_str(), nullptr, 16));
		temp[10] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(2, 2).c_str(), nullptr, 16));
		temp[11] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(4, 2).c_str(), nullptr, 16));
		temp[12] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(6, 2).c_str(), nullptr, 16));
		memcpy(this->raw_data, temp, 14);
	}
	if (this->inverter_type_ == "R2") {
		this->raw_data = new uint8_t[8];
		uint8_t temp[14] = {0xF2, 0x00, 0x00, 0x65, 0xFD, 0x08, 0x08, 0xF9};
		temp[1] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(0, 2).c_str(), nullptr, 16));
		temp[2] = static_cast<uint8_t>(strtol(this->inverter_sn_.substr(2, 2).c_str(), nullptr, 16));
		memcpy(this->raw_data, temp, 8);
	}
}

void WVCComponent::loop() {
	static std::string buffer;
	if (millis() - last_device_query_time <= 1000) {
		return;
	}

	if (turnoff && millis() - last_device_query_time <= 10000) {
		return;
	}

	if (turnoff && millis() - last_device_query_time >= 10000) {
        	turnoff = false;
		return;
	}

	if (turnon && millis() - last_device_query_time <= 30000) {
		return;
		}

	if (turnon && millis() - last_device_query_time >= 30000) {
		turnon = false;
		return;
	}

	if (!waiting_for_response && millis() - last_device_query_time >= throttle_) {
		if (this->inverter_type_ == "R3") {
			if (expected_start_byte == 0xF4){
				raw_data[0] = 0xF3;
				raw_data[13] = 0x66;
				//{0xF3, 0xFD, 0x08, 0x08, 0xF9, 0xE9, 0x1B, 0x00, 0x00, 0x60, 0x00, 0x0F, 0x15, 0x66};
				this->send_command(this->raw_data, sizeof(this->raw_data), this->raw_data[0], sizeof(this->raw_data), this->inverter_sn_);
				ESP_LOGW(TAG, "Turning on %s", this->inverter_sn_.c_str());
				turnon = true;
				raw_data[0] = 0xF5;
				raw_data[13] = 0x68;
				return;
			}
			this->send_command(this->raw_data, sizeof(this->raw_data), this->raw_data[0], 28, this->inverter_sn_);
		}
		if (this->inverter_type_ == "R2") {
			this->send_command(this->raw_data, sizeof(this->raw_data), this->raw_data[0], 19, this->inverter_sn_);
		}
	}
	
	while (this->available() > 0) {
		char c = this->read();
		buffer += c;
		if (buffer.size() >= expected_length) {
			if (buffer[0] == expected_start_byte) {
				ESP_LOGD(TAG, "Received response from inverter: %s", inverter_sn_.c_str());
				parse_response(buffer);
				buffer.clear();
				waiting_for_response = false;
				return;
			}
		}
	}
	
	if (waiting_for_response && millis() - last_device_query_time >= throttle_/8) {
		ESP_LOGW(TAG, "Response timeout: %hhx, %s", buffer[0], inverter_sn_.c_str());
		buffer.clear();
		waiting_for_response = false;
	}
}

void WVCComponent::send_command(uint8_t *command, size_t length, uint8_t expected_start_byte_, size_t expected_length_, const std::string &device_id) {
	write_array(command, length);
	expected_start_byte = expected_start_byte_;
	expected_length = expected_length_;
	waiting_for_response = true;
	ESP_LOGD(TAG, "Sent command %hhX, size: %d, expected lenght: %d to inverter %s", expected_start_byte, length, expected_length, device_id.c_str());
	last_device_query_time = millis();
}

void WVCComponent::parse_response(const std::string &response) {
	if (response.length() == 19) {
		TEMP = temp_r2_lookup(static_cast<int16_t>(response[14]));
		
		VAC = vac_r2_lookup(static_cast<uint16_t>((response[13] << 8) | response[12]));
		
		VDC = static_cast<uint16_t>((response[9] << 8) | response[8]) * 0.10606;
		
		float constants_array[18] =    {0.016035, 0.002436, 0.001315,
						0.016035, 0.002574, 0.001415,
						0.039361, 0.004865, 0.004865,
						0.039361, 0.004865, 0.004865,
						0.034213, 0.007175, 0.007175,
						0.068983, 0.009647, 0.009491};
		if (inverter_model_ == "WVC295"){
			indexADC = 0;
			if (VAC < 160){
				indexAAC = 1;
				//"AACA"
			}else{
				indexAAC = 2;
				//"AACB"
			}
		}

		if (inverter_model_ == "WVC300"){
			indexADC = 3;
			if (VAC < 160){
				indexAAC = 4;
				//"AACA"
			}else{
				indexAAC = 5;
				//"AACB"
			}
		}

		if (inverter_model_ == "WVC350"){
			indexADC = 6;
			if (VAC < 160){
				indexAAC = 7;
				//"AACA"
			}else{
				indexAAC = 8;
				//"AACB"
				}
			}

		if (inverter_model_ == "WV600"){
			indexADC = 9;
			if (VAC < 160){
				indexAAC = 10;
				//"AACA"
				}else{
					indexAAC = 11;
					//"AACB"
					}
			}

		if (inverter_model_ == "WVC850"){
			indexADC = 12;
			if (VAC < 160){
				indexAAC = 13;
				//"AACA"
				}else{
					indexAAC = 14;
					//"AACB"
					}
			}

		if (inverter_model_ == "WVC1200"){
			indexADC = 15;
			if (VAC < 160){
				indexAAC = 16;
				//"AACA"
				}
				else{
					indexAAC = 17;
					//"AACB"
					}
			}
/*
//295
"ADC1023"	16.404	0.016035191 0
"AACA1023"	2.4922	0.002436168 1
"AACB1023"	1.346	0.001315738 2
//300
"ADC1023"	16.404	0.016035191 3
"AACA1023"	2.6342	0.002574976 4
"AACB1023"	1.4481	0.001415543 5
//350
"ADC1023"	40.267	0.039361681 6
"AACA1023"	4.9776	0.004865689 7
"AACB1023"	4.9776	0.004865689 8
//600
"ADC1023"	40.267	0.039361681 9
"AACA1023"	4.9776	0.004865689 10
"AACB1023"	4.9776	0.004865689 11
//850
"ADC1023"	35   	0.034213099 12
"AACA1023"	7.3401	0.007175073 13
"AACB1023"	7.3401	0.007175073 14
//1200
"ADC1023"	70.5705	0.068983871 15
"AACA1023"	9.869	0.009647116 16
"AACB1023"	9.71	0.009491691 17
*/
		AAC = static_cast<uint16_t>((response[11] << 8) | response[10]) * constants_array[indexAAC];
		ADC = static_cast<uint16_t>( (response[7] << 8) | response[6]) * constants_array[indexADC];
		ACW = VAC * AAC;
		if (ACW > 2000) {
			ESP_LOGW(TAG, "ACW exceeds 2000, ignoring response");
			return;
		}
	}

	if (response.length() == 28) {
		VAC = static_cast<int16_t>((response[16] << 8) | response[17]) / 100.0; 
    
		VDC = static_cast<int16_t>((response[14] << 8) | response[15]) / 100.0;
    
		ADC = static_cast<int16_t>((response[18] << 8) | response[19]) / 100.0;
    
		ACW = static_cast<int16_t>((response[24] << 8) | response[25]) / 10;;
    
		TEMP = static_cast<int16_t>((response[26] << 8) | response[27]) / 100;
    
		AAC = ACW/VAC;

		if (ADC <= 0 || VDC < 15) {
			ESP_LOGW(TAG, "ADC <= 0 or VDC < 15, restarting inverter");
			uint8_t retry_command[] = {0xF4, 0xFD, 0x08, 0x08, 0xF9, 0xE9, 0x1B, 0x00, 0x00, 0x60, 0x00, 0x0F, 0x15, 0x67};
			send_command(retry_command, sizeof(retry_command), 0xF4, sizeof(retry_command), inverter_sn_);
			ESP_LOGD(TAG, "Turning off %s", inverter_sn_.c_str());
			turnoff = true;
			return;
		}
	}
	DCW = VDC * ADC;
	EFF = (DCW > 0) ? (ACW / DCW) : 0;
	if (EFF < 1) {
		EFF = round(EFF * 100);
	}else {
		EFF = 0;
	}
	if (this->vac_sensor_) this->publish_state_(this->vac_sensor_, VAC);
	if (this->aac_sensor_) this->publish_state_(this->aac_sensor_, AAC);
	if (this->vdc_sensor_) this->publish_state_(this->vdc_sensor_, VDC);
	if (this->adc_sensor_) this->publish_state_(this->adc_sensor_, ADC);
	if (this->eff_sensor_) this->publish_state_(this->eff_sensor_, EFF);
	if (this->dcw_sensor_) this->publish_state_(this->dcw_sensor_, DCW);
	if (this->acw_sensor_) this->publish_state_(this->acw_sensor_, ACW);
	if (this->temperature_sensor_) this->publish_state_(this->temperature_sensor_, TEMP);
	ESP_LOGD(TAG, "Parsed %hhX Response: VAC: %.2f, AAC: %.2f, VDC: %.2f, ADC: %.2f, EFF: %.2f, DCW: %.2f, ACW: %.2f, Temp: %d", response[0], VAC, AAC, VDC, ADC, EFF, DCW, ACW, TEMP);
}

void WVCComponent::set_inverter_sn(const std::string &sn) {
	this->inverter_sn_ = sn;
	this->set_inverter_type(sn);
}

void WVCComponent::set_inverter_type(const std::string &sn) {
	ESP_LOGD(TAG, "Serial number length: %d", sn.length());
	if (sn.length() == 4){
		this->inverter_type_ = "R2";
		return;
	}
	if (sn.length() == 8){
		this->inverter_type_ = "R3"; 
		return;
	}
	this->inverter_type_ = "Invalid serial number";
}

void WVCComponent::set_inverter_model(const std::string &model) {
	this->inverter_model_ = model;
}

void WVCComponent::publish_state_once_(text_sensor::TextSensor *text_sensor, const std::string &state) {
	if (text_sensor == nullptr)
		return;
	if (text_sensor->has_state())
		return;
	text_sensor->publish_state(state);
}

void WVCComponent::publish_state_(sensor::Sensor *sensor, float value) {
  if (sensor == nullptr)
    return;

  sensor->publish_state(value);
}

void WVCComponent::publish_state_(text_sensor::TextSensor *text_sensor, const std::string &state) {
  if (text_sensor == nullptr)
    return;

  text_sensor->publish_state(state);
}

int16_t WVCComponent::temp_r2_lookup(uint16_t value) {
	int16_t TEMP_Array[256] = {86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,66,65,64,63,62,61,60,59,58,57,56,55,54,54,53,52,51,50,50,49,48,48,47,47,47,46,46,45,44,43,43,43,42,41,41,41,40,40,39,39,39,38,38,37,37,36,36,36,35,35,34,34,34,33,33,33,33,32,32,32,31,31,31,30,30,30,30,29,29,29,28,28,28,28,
	27,27,27,27,26,26,26,26,26,26,25,25,25,25,25,25,24,24,24,24,24,24,23,23,23,23,23,23,22,22,22,22,22,21,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17,16,16,16,16,15,15,15,14,14,14,13,13,13,12,12,12,11,11,11,10,10,10,9,9,9,8,8,8,7,7,7,6,6,6,5,5,5,4,4,4,3,3,2,2,1,1,0,0,-1,-1,-2,-2,-3,-3,-4,
	-4,-5,-5,-6,-6,-7,-7,-8,-8,-9,-9,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-15,-15,-16,-16,-17,-17,-18,-18,-19,-19,-20,-20,-21,-21,-22,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39};

	if (value >= 0 || value <= 255){
		return TEMP_Array[value];
	}else{
		return 0;
	}
}
	
float WVCComponent::vac_r2_lookup(uint16_t value) {
	float VAC_Array[1024] = {0,0.9222,1.8444,2.7666,3.6888,4.611,5.5332,6.4554,7.3776,8.2998,9.222,10.1442,11.0664,11.9886,12.9108,13.833,14.7552,15.6774,16.5996,17.5218,18.444,19.3662,20.2884,21.2106,22.1328,23.055,23.9772,24.8994,25.8216,26.7438,27.666,28.5882,29.5104,30.4326,31.3548,32.277,33.1992,34.1214,35.0436,35.9658,36.888,
	37.8102,38.7324,39.6546,40.5768,41.499,42.4212,43.3434,44.2656,45.1878,46.11,47.0322,47.9544,48.8766,49.8,50.6189,51.4378,52.2567,53.0756,53.8945,54.7134,55.5323,56.3512,57.1701,57.989,58.8079,59.6268,60.4457,61.2646,62.0835,62.9024,63.7213,64.5402,65.3591,66.178,66.9969,67.8158,68.6347,69.4536,70.2725,71.0914,71.9103,
	72.7292,73.5481,74.367,75.1859,76.0048,76.8237,77.6426,78.4615,79.2804,80.1,80.9122,81.7244,82.5366,83.3488,84.161,84.9732,85.7854,86.5976,87.4098,88.222,89.0342,89.8464,90.6586,91.4708,92.283,93.0952,93.9074,94.7196,95.5318,96.344,97.1562,97.9684,98.7806,99.5928,100.405,101.2172,102.0294,102.8416,103.6538,104.466,105.2782,
	106.0904,106.9026,107.7148,108.527,109.3392,110.1514,110.9636,111.7758,112.588,113.4002,114.2124,115.0246,115.8368,116.649,117.4612,118.2734,119.0856,119.9,120.6921,121.4842,122.2763,123.0684,123.8605,124.6526,125.4447,126.2368,127.0289,127.821,128.6131,129.4052,130.1973,130.9894,131.7815,132.5736,133.3657,134.1578,134.9499,
	135.742,136.5341,137.3262,138.1183,138.9104,139.7025,140.4946,141.2867,142.0788,142.8709,143.663,144.4551,145.2472,146.0393,146.8314,147.6235,148.4156,149.2077,150,150.7895,151.579,152.3685,153.158,153.9475,154.737,155.5265,156.316,157.1055,157.895,158.6845,159.474,160.2635,161.053,161.8425,162.632,163.4215,164.211,165.0005,
	165.79,166.5795,167.369,168.1585,168.948,169.7375,170.527,171.3165,172.106,172.8955,173.685,174.4745,175.264,176.0535,176.843,177.6325,178.422,179.2115,180,180.7895,181.579,182.3685,183.158,183.9475,184.737,185.5265,186.316,187.1055,187.895,188.6845,189.474,190.2635,191.053,191.8425,192.632,193.4215,194.211,195.0005,195.79,
	196.5795,197.369,198.1585,198.948,199.7375,200.527,201.3165,202.106,202.8955,203.685,204.4745,205.264,206.0535,206.843,207.6325,208.422,209.2115,210,210.8108,211.6216,212.4324,213.2432,214.054,214.8648,215.6756,216.4864,217.2972,218.108,218.9188,219.7296,220.5404,221.3512,222.162,222.9728,223.7836,224.5944,225.4052,226.216,
	227.0268,227.8376,228.6484,229.4592,230.27,231.0808,231.8916,232.7024,233.5132,234.324,235.1348,235.9456,236.7564,237.5672,238.378,239.1888,240,240.812,241.624,242.436,243.248,244.06,244.872,245.684,246.496,247.308,248.12,248.932,249.744,250.556,251.368,252.18,252.992,253.804,254.616,255.428,256.24,257.052,257.864,258.676,
	259.488,260.3,261.112,261.924,262.736,263.548,264.36,265.172,265.984,266.796,267.608,268.42,269.232,270.044,270.856,271.668,272.48,273.292,274.104,274.916,275.728,276.54,277.352,278.164,278.976,279.788,280.6,281.412,282.224,283.036,283.848,284.66,285.472,286.284,287.096,287.908,288.72,289.532,290.344,291.156,291.968,292.78,
	293.592,294.404,295.216,296.028,296.84,297.652,298.464,299.276,300.088,300.9,301.712,302.524,303.336,304.148,304.96,305.772,306.584,307.396,308.208,309.02,309.832,310.644,311.456,312.268,313.08,313.892,314.704,315.516,316.328,317.14,317.952,318.764,319.576,320.388,321.2,322.012,322.824,323.636,324.448,325.26,326.072,326.884,
	327.696,328.508,329.32,330.132,330.944,331.756,332.568,333.38,334.192,335.004,335.816,336.628,337.44,338.252,339.064,339.876,340.688,341.5,342.312,343.124,343.936,344.748,345.56,346.372,347.184,347.996,348.808,349.62,350.432,351.244,352.056,352.868,353.68,354.492,355.304,356.116,356.928,357.74,358.552,359.364,360.176,360.988,
	361.8,362.612,363.424,364.236,365.048,365.86,366.672,367.484,368.296,369.108,369.92,370.732,371.544,372.356,373.168,373.98,374.792,375.604,376.416,377.228,378.04,378.852,379.664,380.476,381.288,382.1,382.912,383.724,384.536,385.348,386.16,386.972,387.784,388.596,389.408,390.22,391.032,391.844,392.656,393.468,394.28,395.092,
	395.904,396.716,397.528,398.34,399.152,399.964,400.776,401.588,402.4,403.212,404.024,404.836,405.648,406.46,407.272,408.084,408.896,409.708,410.52,411.332,412.144,412.956,413.768,414.58,415.392,416.204,417.016,417.828,418.64,419.452,420.264,421.076,421.888,422.7,423.512,424.324,425.136,425.948,426.76,427.572,428.384,429.196,
	430.008,430.82,431.632,432.444,433.256,434.068,434.88,435.692,436.504,437.316,438.128,438.94,439.752,440.564,441.376,442.188,443,443.812,444.624,445.436,446.248,447.06,447.872,448.684,449.496,450.308,451.12,451.932,452.744,453.556,454.368,455.18,455.992,456.804,457.616,458.428,459.24,460.052,460.864,461.676,462.488,463.3,
	464.112,464.924,465.736,466.548,467.36,468.172,468.984,469.796,470.608,471.42,472.232,473.044,473.856,474.668,475.48,476.292,477.104,477.916,478.728,479.54,480.352,481.164,481.976,482.788,483.6,484.412,485.224,486.036,486.848,487.66,488.472,489.284,490.096,490.908,491.72,492.532,493.344,494.156,494.968,495.78,496.592,497.404,
	498.216,499.028,499.84,500.652,501.464,502.276,503.088,503.9,504.712,505.524,506.336,507.148,507.96,508.772,509.584,510.396,511.208,512.02,512.832,513.644,514.456,515.268,516.08,516.892,517.704,518.516,519.328,520.14,520.952,521.764,522.576,523.388,524.2,525.012,525.824,526.636,527.448,528.26,529.072,529.884,530.696,531.508,532.32,
	533.132,533.944,534.756,535.568,536.38,537.192,538.004,538.816,539.628,540.44,541.252,542.064,542.876,543.688,544.5,545.312,546.124,546.936,547.748,548.56,549.372,550.184,550.996,551.808,552.62,553.432,554.244,555.056,555.868,556.68,557.492,558.304,559.116,559.928,560.74,561.552,562.364,563.176,563.988,564.8,565.612,566.424,567.236,
	568.048,568.86,569.672,570.484,571.296,572.108,572.92,573.732,574.544,575.356,576.168,576.98,577.792,578.604,579.416,580.228,581.04,581.852,582.664,583.476,584.288,585.1,585.912,586.724,587.536,588.348,589.16,589.972,590.784,591.596,592.408,593.22,594.032,594.844,595.656,596.468,597.28,598.092,598.904,599.716,600.528,601.34,602.152,
	602.964,603.776,604.588,605.4,606.212,607.024,607.836,608.648,609.46,610.272,611.084,611.896,612.708,613.52,614.332,615.144,615.956,616.768,617.58,618.392,619.204,620.016,620.828,621.64,622.452,623.264,624.076,624.888,625.7,626.512,627.324,628.136,628.948,629.76,630.572,631.384,632.196,633.008,633.82,634.632,635.444,636.256,637.068,
	637.88,638.692,639.504,640.316,641.128,641.94,642.752,643.564,644.376,645.188,646,646.812,647.624,648.436,649.248,650.06,650.872,651.684,652.496,653.308,654.12,654.932,655.744,656.556,657.368,658.18,658.992,659.804,660.616,661.428,662.24,663.052,663.864,664.676,665.488,666.3,667.112,667.924,668.736,669.548,670.36,671.172,671.984,
	672.796,673.608,674.42,675.232,676.044,676.856,677.668,678.48,679.292,680.104,680.916,681.728,682.54,683.352,684.164,684.976,685.788,686.6,687.412,688.224,689.036,689.848,690.66,691.472,692.284,693.096,693.908,694.72,695.532,696.344,697.156,697.968,698.78,699.592,700.404,701.216,702.028,702.84,703.652,704.464,705.276,706.088,706.9,
	707.712,708.524,709.336,710.148,710.96,711.772,712.584,713.396,714.208,715.02,715.832,716.644,717.456,718.268,719.08,719.892,720.704,721.516,722.328,723.14,723.952,724.764,725.576,726.388,727.2,728.012,728.824,729.636,730.448,731.26,732.072,732.884,733.696,734.508,735.32,736.132,736.944,737.756,738.568,739.38,740.192,741.004,741.816,
	742.628,743.44,744.252,745.064,745.876,746.688,747.5,748.312,749.124,749.936,750.748,751.56,752.372,753.184,753.996,754.808,755.62,756.432,757.244,758.056,758.868,759.68,760.492,761.304,762.116,762.928,763.74,764.552,765.364,766.176,766.988,767.8,768.612,769.424,770.236,771.048,771.86,772.672,773.484,774.296,775.108,775.92,776.732,
	777.544,778.356,779.168,779.98,780.792,781.604,782.416,783.228,784.04,784.852,785.664,786.476,787.288,788.1,788.912,789.724,790.536,791.348,792.16,792.972,793.784,794.596,795.408,796.22,797.032,797.844,798.656,799.468,800.28,801.092,801.904,802.716,803.528,804.34,805.152,805.964,806.776,807.588,808.4,809.212,810.024,810.836,811.648,
	812.46,813.272,814.084,814.896,815.708,816.52,817.332,818.144,818.956,819.768,820.58,821.392,822.204,823.016,823.828,824.64,825.452,826.264,827.076,827.888,828.7,829.512,830.324,831.136,831.948,832.76,833.572,834.384};

	if (value >= 0 || value <= 1023){
		return VAC_Array[value];
	}else{
		return 0;
	}
}

float WVCComponent::vdc_r2_lookup(uint16_t value) {
	float VDC_Array[1024] = {0,0.1066,0.2132,0.3198,0.4264,0.533,0.6396,0.7462,0.8528,0.9594,1.066,1.1726,1.2792,1.3858,1.4924,1.599,1.7056,1.8122,1.9188,2.0254,2.132,2.2386,2.3452,2.4518,2.5584,2.665,2.7716,2.8782,2.9848,3.0914,3.198,3.3046,3.4112,3.5178,3.6244,3.731,3.8376,
	3.9442,4.0508,4.1574,4.264,4.3706,4.4772,4.5838,4.6904,4.797,4.9036,5.0102,5.1168,5.2234,5.33,5.4366,5.5432,5.6498,5.7564,5.863,5.9696,6.0762,6.1828,6.2894,6.396,6.5026,6.6092,6.7158,6.8224,6.929,7.0356,7.1422,7.2488,7.3554,7.462,7.5686,7.6752,7.7818,7.8884,7.995,
	8.1016,8.2082,8.3148,8.4214,8.528,8.6346,8.7412,8.8478,8.9544,9.061,9.1676,9.2742,9.3808,9.4874,9.594,9.7006,9.8072,9.9138,10.0204,10.127,10.2336,10.3402,10.4468,10.5534,10.66,10.7666,10.8732,10.9798,11.0864,11.193,11.2996,11.4062,11.5128,11.6194,11.726,11.8326,11.9392,
	12.0458,12.1524,12.259,12.3656,12.4722,12.5788,12.6854,12.792,12.8986,13,13.106,13.212,13.318,13.424,13.53,13.636,13.742,13.848,13.954,14.06,14.166,14.272,14.378,14.484,14.59,14.696,14.802,14.908,15.014,15.12,15.226,15.332,15.438,15.544,15.65,15.756,15.862,15.968,16.074,16.18,
	16.286,16.392,16.498,16.604,16.71,16.816,16.922,17.028,17.134,17.24,17.346,17.452,17.558,17.664,17.77,17.876,17.982,18.088,18.194,18.3,18.406,18.512,18.618,18.724,18.83,18.936,19.042,19.148,19.254,19.36,19.466,19.572,19.678,19.784,19.89,19.996,20.102,20.208,20.314,20.42,
	20.526,20.632,20.738,20.844,20.95,21.056,21.162,21.268,21.374,21.48,21.586,21.692,21.798,21.904,22.01,22.116,22.222,22.328,22.434,22.54,22.646,22.752,22.858,22.964,23.07,23.176,23.282,23.388,23.494,23.6,23.706,23.812,23.918,24.024,24.13,24.236,24.342,24.448,24.554,24.66,
	24.766,24.872,24.978,25.084,25.19,25.296,25.402,25.508,25.614,25.72,25.826,25.932,26.038,26.144,26.25,26.356,26.462,26.568,26.674,26.78,26.886,26.992,27.098,27.204,27.31,27.416,27.522,27.628,27.734,27.84,27.946,28.052,28.158,28.264,28.37,28.476,28.582,28.688,28.794,28.9,29.006,
	29.112,29.218,29.324,29.43,29.536,29.642,29.748,29.854,29.96,30.066,30.172,30.278,30.384,30.49,30.596,30.702,30.808,30.914,31.02,31.126,31.232,31.338,31.444,31.55,31.656,31.762,31.868,31.974,32.08,32.186,32.292,32.398,32.504,32.61,32.716,32.822,32.928,33.034,33.14,33.246,33.352,
	33.458,33.564,33.67,33.776,33.882,33.988,34.094,34.2,34.306,34.412,34.518,34.624,34.73,34.836,34.942,35.048,35.154,35.26,35.366,35.472,35.578,35.684,35.79,35.896,36.002,36.108,36.214,36.32,36.426,36.532,36.638,36.744,36.85,36.956,37.062,37.168,37.274,37.38,37.486,37.592,37.698,37.804,
	37.91,38.016,38.122,38.228,38.334,38.44,38.546,38.652,38.758,38.864,38.97,39.076,39.182,39.288,39.394,39.5,39.606,39.712,39.818,39.924,40.03,40.136,40.242,40.348,40.454,40.56,40.666,40.772,40.878,40.984,41.09,41.196,41.302,41.408,41.514,41.62,41.726,41.832,41.938,42.044,42.15,42.256,42.362,42.468,42.574,42.68,42.786,
	42.892,42.998,43.104,43.21,43.316,43.422,43.528,43.634,43.74,43.846,43.952,44.058,44.164,44.27,44.376,44.482,44.588,44.694,44.8,44.906,45.012,45.118,45.224,45.33,45.436,45.542,45.648,45.754,45.86,45.966,46.072,46.178,46.284,46.39,46.496,46.602,46.708,46.814,46.92,47.026,47.132,47.238,47.344,47.45,47.556,47.662,47.768,
	47.874,47.98,48.086,48.192,48.298,48.404,48.51,48.616,48.722,48.828,48.934,49.04,49.146,49.252,49.358,49.464,49.57,49.676,49.782,49.888,49.994,50.1,50.206,50.312,50.418,50.524,50.63,50.736,50.842,50.948,51.054,51.16,51.266,51.372,51.478,51.584,51.69,51.796,51.902,52.008,52.114,52.22,52.326,52.432,52.538,52.644,52.75,
	52.856,52.962,53.068,53.174,53.28,53.386,53.492,53.598,53.704,53.81,53.916,54.022,54.128,54.234,54.34,54.446,54.552,54.658,54.764,54.87,54.976,55.082,55.188,55.294,55.4,55.506,55.612,55.718,55.824,55.93,56.036,56.142,56.248,56.354,56.46,56.566,56.672,56.778,56.884,56.99,57.096,57.202,57.308,57.414,57.52,57.626,57.732,
	57.838,57.944,58.05,58.156,58.262,58.368,58.474,58.58,58.686,58.792,58.898,59.004,59.11,59.216,59.322,59.428,59.534,59.64,59.746,59.852,59.958,60.064,60.17,60.276,60.382,60.488,60.594,60.7,60.806,60.912,61.018,61.124,61.23,61.336,61.442,61.548,61.654,61.76,61.866,61.972,62.078,62.184,62.29,62.396,62.502,62.608,62.714,
	62.82,62.926,63.032,63.138,63.244,63.35,63.456,63.562,63.668,63.774,63.88,63.986,64.092,64.198,64.304,64.41,64.516,64.622,64.728,64.834,64.94,65.046,65.152,65.258,65.364,65.47,65.576,65.682,65.788,65.894,66,66.106,66.212,66.318,66.424,66.53,66.636,66.742,66.848,66.954,67.06,67.166,67.272,67.378,67.484,67.59,67.696,
	67.802,67.908,68.014,68.12,68.226,68.332,68.438,68.544,68.65,68.756,68.862,68.968,69.074,69.18,69.286,69.392,69.498,69.604,69.71,69.816,69.922,70.028,70.134,70.24,70.346,70.452,70.558,70.664,70.77,70.876,70.982,71.088,71.194,71.3,71.406,71.512,71.618,71.724,71.83,71.936,72.042,72.148,72.254,72.36,72.466,72.572,72.678,
	72.784,72.89,72.996,73.102,73.208,73.314,73.42,73.526,73.632,73.738,73.844,73.95,74.056,74.162,74.268,74.374,74.48,74.586,74.692,74.798,74.904,75.01,75.116,75.222,75.328,75.434,75.54,75.646,75.752,75.858,75.964,76.07,76.176,76.282,76.388,76.494,76.6,76.706,76.812,76.918,77.024,77.13,77.236,77.342,77.448,77.554,77.66,
	77.766,77.872,77.978,78.084,78.19,78.296,78.402,78.508,78.614,78.72,78.826,78.932,79.038,79.144,79.25,79.356,79.462,79.568,79.674,79.78,79.886,79.992,80.098,80.204,80.31,80.416,80.522,80.628,80.734,80.84,80.946,81.052,81.158,81.264,81.37,81.476,81.582,81.688,81.794,81.9,82.006,82.112,82.218,82.324,82.43,82.536,82.642,
	82.748,82.854,82.96,83.066,83.172,83.278,83.384,83.49,83.596,83.702,83.808,83.914,84.02,84.126,84.232,84.338,84.444,84.55,84.656,84.762,84.868,84.974,85.08,85.186,85.292,85.398,85.504,85.61,85.716,85.822,85.928,86.034,86.14,86.246,86.352,86.458,86.564,86.67,86.776,86.882,86.988,87.094,87.2,87.306,87.412,87.518,87.624,
	87.73,87.836,87.942,88.048,88.154,88.26,88.366,88.472,88.578,88.684,88.79,88.896,89.002,89.108,89.214,89.32,89.426,89.532,89.638,89.744,89.85,89.956,90.062,90.168,90.274,90.38,90.486,90.592,90.698,90.804,90.91,91.016,91.122,91.228,91.334,91.44,91.546,91.652,91.758,91.864,91.97,92.076,92.182,92.288,92.394,92.5,92.606,
	92.712,92.818,92.924,93.03,93.136,93.242,93.348,93.454,93.56,93.666,93.772,93.878,93.984,94.09,94.196,94.302,94.408,94.514,94.62,94.726,94.832,94.938,95.044,95.15,95.256,95.362,95.468,95.574,95.68,95.786,95.892,95.998,96.104,96.21,96.316,96.422,96.528,96.634,96.74,96.846,96.952,97.058,97.164,97.27,97.376,97.482,97.588,
	97.694,97.8,97.906,98.012,98.118,98.224,98.33,98.436,98.542,98.648,98.754,98.86,98.966,99.072,99.178,99.284,99.39,99.496,99.602,99.708,99.814,99.92,100.026,100.132,100.238,100.344,100.45,100.556,100.662,100.768,100.874,100.98,101.086,101.192,101.298,101.404,101.51,101.616,101.722,101.828,101.934,102.04,102.146,102.252,
	102.358,102.464,102.57,102.676,102.782,102.888,102.994,103.1,103.206,103.312,103.418,103.524,103.63,103.736,103.842,103.948,104.054,104.16,104.266,104.372,104.478,104.584,104.69,104.796,104.902,105.008,105.114,105.22,105.326,105.432,105.538,105.644,105.75,105.856,105.962,106.068,106.174,106.28,106.386,106.492,106.598,
	106.704,106.81,106.916,107.022,107.128,107.234,107.34,107.446,107.552,107.658,107.764,107.87,107.976,108.082,108.188,108.294,108.4,108.506};

	if (value >= 0 || value <= 1023){
		return VDC_Array[value];
	}else{
		return 0;
	}
}


void WVCComponent::set_vac_sensor(sensor::Sensor *sensor) { vac_sensor_ = sensor; }
void WVCComponent::set_aac_sensor(sensor::Sensor *sensor) { aac_sensor_ = sensor; }
void WVCComponent::set_vdc_sensor(sensor::Sensor *sensor) { vdc_sensor_ = sensor; }
void WVCComponent::set_adc_sensor(sensor::Sensor *sensor) { adc_sensor_ = sensor; }
void WVCComponent::set_acw_sensor(sensor::Sensor *sensor) { acw_sensor_ = sensor; }
void WVCComponent::set_dcw_sensor(sensor::Sensor *sensor) { dcw_sensor_ = sensor; }
void WVCComponent::set_eff_sensor(sensor::Sensor *sensor) { eff_sensor_ = sensor; }
void WVCComponent::set_temperature_sensor(sensor::Sensor *sensor) { temperature_sensor_ = sensor; }

}  // namespace wvc
}  // namespace esphome
